
/*
# 조인이란?
- 서로 다른 테이블간에 설정된 관계가 결합하여
 1개 이상의 테이블에서 데이터를 조회하기 위해서 사용합니다.
- SELECT 컬럼리스트 FROM 조인대상이 되는 테이블 (1개 이상)
  WHERE 조인 조건 (오라클 조인 문법)
*/

--employees 테이블의 부서 id와 일치하는 departments 테이블의 부서 id를
-- 찾아서 SELECT 이하에 있는 컬럼들을 출력하는 쿼리문.
SELECT
    e.first_name,
    d.department_name
FROM employees e, departments d
-- employees : first_name , departments : department_name
WHERE e.department_id = d.department_id; -- 오라클 조인 문법
-- 둘 다 가지고 있는 경우에는 컬럼을 무조건 작성해야한다. 
-- 따로 가지고 있는 경우에는 컬럼에 작성은 의무가 아니다.

SELECT 
    e.first_name, e.last_name, e.hire_date,
    e.salary, e.job_id, d.department_name
FROM employees e INNER JOIN departments d
ON e.department_id = d.department_id; 
-- ANSI 문법: 표준 조인 문법 , ON은 구역 나누기 위한 명령어(가독성 좋음)

/*
각각의 테이블에 독립적으로 존재하는 컬럼의 경우에는
테이블 이름을 생략해도 무방합니다. 그러나, 해석의 명확성을 위해
테이블 이름을 작성하셔서 소속을 표현해 주는 것이 바람직합니다.
테이블 이름이 너무 길 시에는 ALIAS를 작성하여 칭합니다.
두 테이블 모두 가지고 있는 컬럼의 경우 반드시 명시해 주셔야 합니다.
*/

-- 3개의 테이블을 이용한 내부 조인(INNER JOIN)
-- 내부 조인: 조인 조건에 일치하는 행만 반환하는 조인. 
-- 조인 조건과 일치하지 않는 데이터는 조회 대상에서 제외.
SELECT
    e.first_name, e.last_name,
    e.department_id, e.job_id,
    d.department_name,
    j.job_title
FROM employees e, departments d, jobs j
WHERE e.department_id = d.department_id
AND e.job_id = j.job_id;

SELECT 
    e.first_name, e.last_name, e.department_id,
    d.department_name, e.job_id, j.job_title, loc.city
FROM 
     employees e, 
     departments d, 
     jobs j, 
     locations loc
WHERE e.department_id = d.department_id
AND e.job_id = j.job_id -- 3,4
AND d.location_id = loc.location_id --2
AND loc.state_province = 'California'; --1 
--합쳐지기 전에 궁극적으로 걸러야 할껀 먼저 걸러내고 합치는게 지금의 루트이다.

/*
    1. loc 테이블의 state_province = 'califonia' 조건에 맞는 값을 대상으로 
    2. location_id 값과 같은 값을 가지는 데이터를 departments에서 찾아서 조인
    3. 위에 조언한 결과와 동일한 department_id를 가진 employees 테이블의 데이터를 찾아 조언
    4. 위에 결과와 jobs 테이블을 비교하여 조인하고 최종 결과를 출력.
*/

-- 외부 조인
/*
    상호 테이블 간에 일치되는 값으로 연결되는 내부 조인과는 다르게
    어느 한 테이블에 공통 값이 없더라도 해당 row들이 조회 결과에
    모두 포함되는 조인을 말합니다.
*/

SELECT
    e.first_name,
    d.department_name,
    loc.location_id
FROM employees e, departments d, locations loc
WHERE e.department_id = d.department_id(+) --2
AND d.location_id = loc.location_id; --1
/* 위에 대한 내용
    employees 테이블에는 존재하고, departments 테이블에는 존재하지 않아도
    (+)가 붙지 않은 테이블을 기준으로 하여 departments 테이블이 조인에
    참여하라는 의미를 부여하기 위해 기호를 붙입니다.
    (+)가 없었을땐 employees , department의 일치하는 것만 나왔다면
    외부 조인은 department 기준으로 해서 null있는거 까지 107개가 보장된다.
    외부조인은 데이터의 누락이 없다 다만 값이 없는 건 null로 표기된다.
    (+)가 아닌 붙는 테이블이 기준이 된다. 기준이 되는 값은 다 나오되
    붙는 테이블은 값이 없다면 null 이 나오게 된다.(Outer Join 정의)
    
    외부조인을 사용했더라도 , 이후에 내부조인을 사용하게 되면
    내부조인을 우선적으로 인식합니다.
*/
    
SELECT
    e.employee_id, e.first_name,
    e.department_id,
    j.start_date, j.end_date, j.job_id
FROM employees e, job_history j
WHERE e.employee_id = j.employee_id(+) -- job.history에 값이 다 나온다.
AND j.department_id(+) = 80; -- 위에 대한 내용
-- 외부 조인보다 내부 조인이 더 우선권이 있기 때문에 2개만 먼저 수행되는걸 확인할 수 있다.
-- 만약 내부 조인이 먼저 수행되기 보단 80이란 값이 있는 내용 전부를 출력하고 싶다면
-- 80을 나타내는 값에도 (+)외부조인 값을 붙쳐야 80이란 정보가 다 나온다.
